use std::\{sync::Arc, env, collections::HashMap};

use datamodel::\{parse_configuration, common::preview_features::PreviewFeature};
use query_core::\{BuildMode, QuerySchema, executor::\{self, QueryExecutor}, schema_builder, Operation, ResponseData};
use prisma_models::InternalDataModelBuilder;
use serde::\{de::DeserializeOwned, Serialize, Deserialize};
use juniper::GraphQLEnum;
use graphql_parser::parse_query;
use inflector::Inflector;
use prisma_derive::QueryInternal;
use request_handlers::GraphQLProtocolAdapter;
use crate::\{serialization::to_query_args, Queryable};

// ====================== Enums ==========================

{{- for enum in enums }}
#[derive(Clone, PartialEq, Deserialize, Serialize, Debug, QueryInternal, GraphQLEnum)]
pub enum {enum.name} \{
	{{- for variant in enum.variants}}
	#[serde(rename = "{variant.actual}")]
	{variant.render | unescaped},
	{{- endfor}}
}
{{- endfor }}

{{- for enum in input_enums }}
#[derive(Clone, Debug, Serialize)]
#[serde(untagged)]
pub enum {enum.name} \{
	{{- for variant in enum.variants}}
	{{- if variant.rename }}
	#[serde(rename = "{variant.actual}")]
	{{- endif }}
	{variant.render | unescaped},
	{{- endfor}}
}
{{- endfor }}

// ======================================================================================

// ====================================== Input Types ===================================
{{- for struct in inputs }}
#[derive(Clone, Default, Serialize, Debug)]
pub struct {struct.name} \{
    {{- for field in struct.fields}}
    {{- if not field.is_required }}
    #[serde(skip_serializing_if = "Option::is_none")]
    {{- endif }}
    #[serde(rename = "{field.name.actual}")]
    pub {field.name.render}: {field.type | unescaped},
    {{- endfor }}
}
{{- endfor }}
// ======================================================================================

// ====================================== Output Types ===================================
{{- for struct in outputs }}
#[derive(Clone, Serialize, Deserialize, Debug, QueryInternal)]
pub struct {struct.name} \{
    {{- for field in struct.fields}}
    {{- if not field.is_required }}
    #[serde(skip_serializing_if = "Option::is_none")]
    {{- endif }}
    #[serde(rename = "{field.name.actual}")]
    pub {field.name.render}: {field.type | unescaped},
    {{- endfor }}
}
{{- endfor }}
// ======================================================================================


// ======================================= Argument Types ==========================================
{{- for operation in operations }}
{{- for struct in operation.input_types }}
#[derive(Clone, Default, Serialize, Debug)]
pub struct {struct.name} \{
    {{-for field in struct.fields}}
    {{-if not field.is_required }}
    #[serde(skip_serializing_if = "Option::is_none")]
    {{- endif }}
    pub {field.name.render}: {field.type | unescaped},
    {{-endfor}}
}
{{- endfor }}

{{- for enum in operation.input_enums }}
#[derive(Clone, Debug, Serialize)]
#[serde(untagged)]
pub enum {enum.name} \{
	{{- for variant in enum.variants}}
	{{- if variant.rename }}
	#[serde(rename = "{variant.actual}")]
	{{- endif }}
	{variant.render | unescaped},
	{{- endfor}}
}
{{- endfor }}
{{- endfor }}
// ============================================================================================

pub struct Prisma \{
	executor: Box<dyn QueryExecutor + Send + Sync + 'static>,
	query_schema: Arc<QuerySchema>,
}

pub struct Transaction<'a> \{
	operations: Vec<Operation>,
	client: &'a Prisma,
}

// TODO: implement BatchRequest

impl<'a> Transaction<'a> \{
	// TODO: split mutations from operations
	{{- for operation in operations }}
    {{- for method in operation.methods }}
    pub fn {method.fn_name}<T>(mut self, {method.fn_arg | unescaped}) -> Result<Self, Error>
        where
            T: Queryable + DeserializeOwned,
    \{
    	let mut operation_args = String::new();
        // for every query argument, insert it into the gql query.
        {{- for arg in method.query_args }}
    	{{- if not arg.is_required }}
        if {arg.name.render}.is_some() \{
        	operation_args.push_str(&format!(
        		"{arg.name.actual}: \{},",
        		to_query_args({arg.name.render}.as_ref().unwrap()).unwrap()
        	));
        }
        {{- else }}
        operation_args.push_str(&format!(
        	"{arg.name.actual}: \{},",
        	to_query_args(&{arg.name.render}).unwrap()
        ));
        {{- endif }}
    	{{- endfor }}

    	if !operation_args.is_empty() \{
    		operation_args = format!("(\{})", operation_args);
    	}
    	let query = format!(r#"{operation.name} \{\{ {method.query_name} \{} \{} }}"#,
    		operation_args,
    		T::query(),
    	);
		let document = parse_query(&query)?;
		let operation = GraphQLProtocolAdapter::convert(document, None).unwrap();
		self.operations.push(operation);
    	Ok(self)
    }
    {{- endfor }}
    {{- endfor }}

	pub async fn execute<T>(self) -> Result<T, Error>
		where
			T: DeserializeOwned,
	\{
		if self.operations.is_empty() \{
			return Err(Error::Other("No operations specified.".into()))
		}

		let query_schema = self.client.query_schema.clone();
		let responses = self.client.executor.execute_all(None, self.operations, true, query_schema, None).await?;
		let response = responses.into_iter().collect::<Result<Vec<ResponseData>, _>>()?;

		let map = response.into_iter()
			.fold(HashMap::new(), |mut map, response| \{
				map.insert(format_method_name(response.key), response.data);
				map
			});

		let value = serde_json::to_value(&map)
			.expect("Deserializing to serde_json::Value should be infallible");
		let data = serde_json::from_value(value)
			.expect("Validation is done by prisma_client_derive::Queryable, this is infallible");

		Ok(data)
	}
}

impl Prisma \{
	pub async fn new(preview_features: Vec<PreviewFeature>) -> Result<Self, Error> \{
		let datamodel_str = r###"{datamodel | unescaped}"###;
		let config = parse_configuration(datamodel_str)?.subject;
		let source = config.datasources.first()
			.expect("Please supply a datasource in your datamodel.prisma file");

		let url = if let Some(url) = source.load_shadow_database_url()? \{
			url
		} else \{
			source.load_url(|key| env::var(key).ok())?
		};
		let (db_name, executor) = executor::load(&source, &preview_features, &url).await?;

		let internal_model = InternalDataModelBuilder::new(&datamodel_str).build(db_name);
		let query_schema = Arc::new(schema_builder::build(
			internal_model,
			BuildMode::Modern,
			true,
			source.capabilities(),
			preview_features,
			source.referential_integrity(),
		));
		// verify connection
		executor.primary_connector().get_connection().await?;

		Ok(Self \{ executor, query_schema })
	}

	pub fn transaction<'a>(&'a self) -> Transaction<'a> \{
		Transaction \{ client: &self, operations: vec![] }
	}

	// TODO: support transactions.
	// TODO: add docs to methods
	// TODO: generate model types

	{{- for operation in operations }}
    {{- for method in operation.methods }}
    pub async fn {method.fn_name}<T>(&self, {method.fn_arg | unescaped}) -> Result<{ method.fn_return | unescaped}, Error>
        where
            T: Queryable + DeserializeOwned,
    \{
    	let mut operation_args = String::new();
        // for every query argument, insert it into the gql query.
        {{- for arg in method.query_args }}
    	{{- if not arg.is_required }}
        if {arg.name.render}.is_some() \{
        	operation_args.push_str(&format!(
        		"{arg.name.actual}: \{},",
        		to_query_args({arg.name.render}.as_ref().unwrap()).unwrap()
        	));
        }
        {{- else }}
        operation_args.push_str(&format!(
        	"{arg.name.actual}: \{},",
        	to_query_args(&{arg.name.render}).unwrap()
        ));
        {{- endif }}
    	{{- endfor }}

    	if !operation_args.is_empty() \{
    		operation_args = format!("(\{})", operation_args);
    	}
    	let query = format!(r#"{operation.name} \{\{ {method.query_name} \{} \{} }}"#,
    		operation_args,
    		T::query(),
    	);
    	let document = parse_query(&query)?;
    	log::debug!(target: "prisma-client", "\n\{}", document);
    	let schema = self.query_schema.clone();
		let operation = GraphQLProtocolAdapter::convert(document, None).unwrap();

    	let response = self.executor.execute(None, operation, schema, None).await?.data;

    	// TODO: implement Deserializer for `Item`
    	// let data = T::deserialize(response)
    	//     .expect("Validation is done by prisma_derive::Queryable, this is infallible"));
    	let value = serde_json::to_value(&response)
    		.expect("Deserializing to serde_json::Value should be infallible");
    	let data = serde_json::from_value(value)
    		.expect("Validation is done by prisma_client_derive::Queryable, this is infallible");
    	Ok(data)
    }
    {{- endfor }}
    {{- endfor }}
}

#[derive(derive_more::From, derive_more::Display, Debug)]
pub enum Error \{
	QueryError(query_core::error::CoreError),
	GraphqlParseError(graphql_parser::query::ParseError),
	QueryConnector(query_connector::error::ConnectorError),
	Datamodel(datamodel::diagnostics::Diagnostics),
	Other(String),
}

/// format the medthod name
fn format_method_name(name: String) -> String \{
	if name.contains("findMany") \{
		return name
			.replace("findMany", "")
			.to_snake_case()
			.to_lowercase()
			.to_plural();
	}

	if name.contains("findFirst") \{
		return name
			.replace("findFirst", "first ")
			.to_snake_case()
			.to_lowercase()
	}

	if name.contains("aggregate") \{
		return name
			.replace("aggregate", "aggregate ")
			.to_lowercase()
			.to_snake_case()
			.to_plural()
	}

	if name.contains("groupBy") \{
		return name
			.replace("groupBy", "group ")
			.to_lowercase()
			.to_snake_case()
			.to_plural()
	}

	if name.contains("findUnique") \{
		return name.replace("findUnique", "").to_snake_case().to_lowercase();
	}

	if name.contains("One") \{
		return name.replace("One", " ").to_snake_case().to_lowercase();
	}

	name.replace("Many", " ")
		.to_snake_case()
		.to_lowercase()
		.to_plural()
}

